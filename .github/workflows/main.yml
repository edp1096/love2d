name: Build Love2D

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  LOVE2D_REPO: "https://github.com/love2d/love.git"
  LOVE2D_BRANCH: "main"
  LUA54_VERSION: "5.4.7"

permissions:
  contents: write
  packages: write

jobs:
  version:
    name: Determine Love2D version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      padded_build: ${{ steps.get-version.outputs.padded_build }}
      commit_hash: ${{ steps.get-version.outputs.commit_hash }}

    steps:
    - name: Get version and commit info
      id: get-version
      run: |
        # Clone Love2D to get commit hash
        git clone --depth 1 --branch ${{ env.LOVE2D_BRANCH }} ${{ env.LOVE2D_REPO }} love2d-temp
        COMMIT_HASH=$(git -C love2d-temp rev-parse --short HEAD)
        echo "version=$(date "+%Y.%m.%d")" >> $GITHUB_OUTPUT
        echo "padded_build=$(printf '%05d' ${{ github.run_number }})" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        rm -rf love2d-temp

  Linux:
    runs-on: ${{ matrix.runner }}
    needs: version
    strategy:
      matrix:
        runner: [ubuntu-22.04, ubuntu-24.04-arm]
    env:
      ALSOFT_CONF: love2d-${{ needs.version.outputs.commit_hash }}/testing/resources/alsoft.conf
      VK_LAYER_SETTINGS_PATH: love2d-${{ needs.version.outputs.commit_hash }}/testing/resources/vk_layer_settings.txt
      DISPLAY: :99
    steps:
    - name: Update APT
      run: sudo apt-get update
    - name: Install Dependencies
      run: |
        sudo apt-get install --assume-yes build-essential git make cmake autoconf automake \
                                          libtool pkg-config libasound2-dev libpulse-dev libaudio-dev \
                                          libjack-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
                                          libxfixes-dev libxi-dev libxinerama-dev libxxf86vm-dev libxss-dev \
                                          libgl1-mesa-dev libdbus-1-dev libudev-dev libgles2-mesa-dev \
                                          libegl1-mesa-dev libibus-1.0-dev fcitx-libs-dev libsamplerate0-dev \
                                          libsndio-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev \
                                          libcurl4-openssl-dev libfuse2 libpipewire-0.3-dev libwayland-dev \
                                          libdecor-0-dev liburing-dev libvulkan1
    - name: Install Vulkan SDK
      if: ${{ runner.arch == 'X64' }}
      run: |
        set -e
        wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.283-jammy.list https://packages.lunarg.com/vulkan/1.3.283/lunarg-vulkan-1.3.283-jammy.list
        sudo apt-get update
        sudo apt-get install --assume-yes vulkan-sdk
    - name: Checkout love-appimage-source
      uses: actions/checkout@v4
      with:
        repository: love2d/love-appimage-source
        ref: main
    - name: Checkout LÃ–VE
      run: |
        git clone --recursive ${{ env.LOVE2D_REPO }} love2d-${{ needs.version.outputs.commit_hash }}
        cd love2d-${{ needs.version.outputs.commit_hash }}
        git checkout ${{ env.LOVE2D_BRANCH }}
    - name: Get Dependencies for AppImage
      shell: python
      env:
        LOVE_BRANCH: ${{ needs.version.outputs.commit_hash }}
      run: |
        import os
        for i in range(250):
            if os.system(f"make getdeps LOVE_BRANCH={os.environ['LOVE_BRANCH']}") == 0:
                raise SystemExit(0)
        raise Exception("make getdeps failed")
    - name: Build AppImage
      run: make LOVE_BRANCH=${{ needs.version.outputs.commit_hash }}
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: love-linux-${{ runner.arch }}.AppImage
        path: love-${{ needs.version.outputs.commit_hash }}.AppImage

  Windows:
    runs-on: windows-2025
    needs: version
    env: 
      ALSOFT_CONF: megasource/libs/love/testing/resources/alsoft.conf
    strategy:
      matrix:
        platform: [x64, ARM64]
        lua-engine: [luajit, lua54]
    defaults:
      run:
        shell: cmd
    continue-on-error: ${{ matrix.platform == 'ARM64' }}
    steps:
    - name: Define Variables
      id: vars
      run: |
        rem JIT Modules
        if "${{ matrix.platform }}" == "x64" (
          if "${{ matrix.lua-engine }}" == "luajit" (
            (echo jitmodules=1)>> "%GITHUB_OUTPUT%"
          ) else (
            (echo jitmodules=0)>> "%GITHUB_OUTPUT%"
          )
        ) else (
          (echo jitmodules=0)>> "%GITHUB_OUTPUT%"
        )
        
        rem Lua Engine Suffix
        if "${{ matrix.lua-engine }}" == "lua54" (
          (echo lua_suffix=-lua54)>> "%GITHUB_OUTPUT%"
        ) else (
          (echo lua_suffix=)>> "%GITHUB_OUTPUT%"
        )
        
        rem Architecture-Specific Switch
        goto ${{ matrix.platform }}
        exit /b 1
        
        :x64
        (echo arch=x64)>> "%GITHUB_OUTPUT%"
        (echo angle=0)>> "%GITHUB_OUTPUT%"
        echo nofiles=warn>> "%GITHUB_OUTPUT%"
        exit /b 0
        
        :ARM64
        (echo arch=arm64)>> "%GITHUB_OUTPUT%"
        (echo angle=1)>> "%GITHUB_OUTPUT%"
        echo nofiles=ignore>> "%GITHUB_OUTPUT%"
        echo moredef=-DLOVE_EXTRA_DLLS=%CD%\angle\libEGL.dll;%CD%\angle\libGLESv2.dll>> "%GITHUB_OUTPUT%"
        exit /b 0
    - name: Install NSIS
      run: winget install nsis --disable-interactivity --accept-source-agreements --accept-package-agreements
    - name: Download pdbstr
      run: curl -Lfo pdbstr.nupkg https://www.nuget.org/api/v2/package/Microsoft.Debugging.Tools.PdbStr/20230731.1609.0
    - name: Download srctool
      run: curl -Lfo srctool.nupkg https://www.nuget.org/api/v2/package/Microsoft.Debugging.Tools.SrcTool/20230731.1609.0
    - name: Extract Tools and Add to PATH
      run: |
        mkdir debugtools
        cd debugtools
        if errorlevel 1 exit /b 1
        7z e ..\srctool.nupkg content/amd64/srctool.exe
        if errorlevel 1 exit /b 1
        7z e ..\pdbstr.nupkg content/amd64/pdbstr.exe
        if errorlevel 1 exit /b 1
        echo %CD%>>%GITHUB_PATH%
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Download source_index.py
      run: curl -Lfo source_index.py https://gist.github.com/MikuAuahDark/d9c099f5714e09a765496471c2827a55/raw/df34956052035f3473c5f01861dfb53930d06843/source_index.py
    - name: Clone Megasource
      uses: actions/checkout@v4
      with:
        path: megasource
        repository: love2d/megasource
        ref: main
    - id: megasource
      name: Get Megasource Commit SHA
      shell: python
      run: |
        import os
        import subprocess
        
        result = subprocess.run("git -C megasource rev-parse HEAD".split(), check=True, capture_output=True, encoding="UTF-8")
        commit = result.stdout.split()[0]
        with open(os.environ["GITHUB_OUTPUT"], "w", encoding="UTF-8") as f: f.write(f"commit={commit}")
    - name: Checkout Love2D
      run: |
        git clone --recursive ${{ env.LOVE2D_REPO }} megasource/libs/love
        cd megasource/libs/love
        git checkout ${{ env.LOVE2D_BRANCH }}
    - name: Download and Setup Lua 5.4
      if: matrix.lua-engine == 'lua54'
      shell: cmd
      run: |
        rem Download Lua 5.4 source
        curl -Lfo lua-${{ env.LUA54_VERSION }}.tar.gz https://www.lua.org/ftp/lua-${{ env.LUA54_VERSION }}.tar.gz
        if errorlevel 1 exit /b 1
        
        rem Extract Lua source
        mkdir lua54-temp
        cd lua54-temp
        tar -xzf ..\lua-${{ env.LUA54_VERSION }}.tar.gz
        if errorlevel 1 exit /b 1
        
        rem Create lua directory in megasource if it doesn't exist
        if not exist ..\megasource\libs\lua mkdir ..\megasource\libs\lua
        
        rem Copy Lua source files to megasource
        xcopy /E /I /Y lua-${{ env.LUA54_VERSION }}\src\*.* ..\megasource\libs\lua\
        if errorlevel 1 exit /b 1
        
        cd ..
        
        rem Create CMakeLists.txt for Lua 5.4
        (
        echo cmake_minimum_required(VERSION 3.1^)
        echo project(lua C^)
        echo.
        echo # Lua 5.4 source files
        echo set(LUA_CORE_SRC
        echo     lapi.c lcode.c lctype.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c
        echo     lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c
        echo     ltm.c lundump.c lvm.c lzio.c
        echo ^)
        echo.
        echo set(LUA_LIB_SRC
        echo     lauxlib.c lbaselib.c lcorolib.c ldblib.c liolib.c lmathlib.c
        echo     loadlib.c loslib.c lstrlib.c ltablib.c lutf8lib.c linit.c
        echo ^)
        echo.
        echo add_library(lua STATIC ${LUA_CORE_SRC} ${LUA_LIB_SRC}^)
        echo.
        echo # Define LUA_BUILD_AS_DLL for Windows
        echo if(WIN32^)
        echo     target_compile_definitions(lua PRIVATE LUA_BUILD_AS_DLL^)
        echo endif(^)
        echo.
        echo # Set include directories
        echo target_include_directories(lua PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}^)
        echo.
        echo # Install targets
        echo install(TARGETS lua
        echo     ARCHIVE DESTINATION lib
        echo     LIBRARY DESTINATION lib
        echo     RUNTIME DESTINATION bin
        echo ^)
        ) > megasource\libs\lua\CMakeLists.txt
    - name: Download ANGLE
      uses: robinraju/release-downloader@v1.9
      if: steps.vars.outputs.angle == '1'
      with:
        repository: MikuAuahDark/angle-winbuild
        tag: cr_5249
        fileName: angle-win-${{ steps.vars.outputs.arch }}.zip
        tarBall: false
        zipBall: false
        out-file-path: angle
    - name: Extract ANGLE
      if: steps.vars.outputs.angle == '1'
      working-directory: angle
      run: 7z x angle-win-${{ steps.vars.outputs.arch }}.zip
    - name: Remove Strawberry Perl From Path
      run: |
        move /y C:\Strawberry C:\Strawberry_not_in_PATH
        exit /b 0
    - name: Configure
      env:
        CFLAGS: /Zi
        CXXFLAGS: /Zi
        LDFLAGS: /DEBUG:FULL /OPT:REF /OPT:ICF
      run: |
        if "${{ matrix.lua-engine }}" == "lua54" (
          cmake -Bbuild -Smegasource -T v143 -A ${{ matrix.platform }},version=10.0.26100.0 --install-prefix %CD%\install -DCMAKE_PDB_OUTPUT_DIRECTORY=%CD%\pdb -DMEGASOURCE_USE_LUA=ON -DMEGASOURCE_USE_LUAJIT=OFF ${{ steps.vars.outputs.moredef }}
        ) else (
          cmake -Bbuild -Smegasource -T v143 -A ${{ matrix.platform }},version=10.0.26100.0 --install-prefix %CD%\install -DCMAKE_PDB_OUTPUT_DIRECTORY=%CD%\pdb ${{ steps.vars.outputs.moredef }}
        )
    - name: Install
      run: cmake --build build --target PACKAGE --config Release -j2
    - name: Copy LuaJIT lua51.pdb
      if: matrix.lua-engine == 'luajit'
      run: |
        copy /Y build\libs\LuaJIT\src\lua51.pdb pdb\Release\lua51.pdb
        exit /b 0
    - name: Copy Lua 5.4 pdb
      if: matrix.lua-engine == 'lua54'
      run: |
        copy /Y build\libs\lua\lua.pdb pdb\Release\lua.pdb
        exit /b 0
    - name: Add srcsrv to PATH
      run: |
        echo C:\Program Files (x86^)\Windows Kits\10\Debuggers\x64\srcsrv>>%GITHUB_PATH%
    - name: Embed Source Index into PDBs (LuaJIT)
      if: matrix.lua-engine == 'luajit'
      run: |
        python source_index.py ^
        --source %CD%\megasource\libs\love https://raw.githubusercontent.com/love2d/love/${{ needs.version.outputs.commit_hash }} ^
        --source %CD%\megasource https://raw.githubusercontent.com/love2d/megasource/${{ steps.megasource.outputs.commit }} ^
        --source %CD%\build\libs\LuaJIT https://raw.githubusercontent.com/love2d/megasource/${{ steps.megasource.outputs.commit }}/libs/LuaJIT ^
        pdb\Release\*.pdb
    - name: Embed Source Index into PDBs (Lua 5.4)
      if: matrix.lua-engine == 'lua54'
      run: |
        python source_index.py ^
        --source %CD%\megasource\libs\love https://raw.githubusercontent.com/love2d/love/${{ needs.version.outputs.commit_hash }} ^
        --source %CD%\megasource https://raw.githubusercontent.com/love2d/megasource/${{ steps.megasource.outputs.commit }} ^
        pdb\Release\*.pdb
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-${{ steps.vars.outputs.arch }}${{ steps.vars.outputs.lua_suffix }}
        path: |
          build/*.zip
          build/*.exe
        if-no-files-found: ${{ steps.vars.outputs.nofiles }}
    - name: Artifact JIT Modules
      if: steps.vars.outputs.jitmodules == '1'
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-jitmodules
        path: build/libs/LuaJIT/src/jit/*.lua
    - name: Artifact PDB
      uses: actions/upload-artifact@v4
      with:
        name: love-windows-${{ steps.vars.outputs.arch }}${{ steps.vars.outputs.lua_suffix }}-dbg
        path: pdb/Release/*.pdb

  macOS:
    runs-on: macos-latest
    needs: version
    env:
      ALSOFT_CONF: testing/resources/alsoft.conf
    steps:
    - name: Checkout Love2D
      run: |
        git clone --recursive ${{ env.LOVE2D_REPO }} love2d
        cd love2d
        git checkout ${{ env.LOVE2D_BRANCH }}
    - name: Clone Dependencies
      uses: actions/checkout@v4
      with:
        path: apple-dependencies
        repository: love2d/love-apple-dependencies
        ref: main
    - name: Move Dependencies
      run: |
        mv apple-dependencies/macOS/Frameworks love2d/platform/xcode/macosx
        mv apple-dependencies/shared love2d/platform/xcode
    - name: Build
      working-directory: love2d
      run: |
        xcodebuild clean archive -project platform/xcode/love.xcodeproj -scheme love-macosx -configuration Release -destination generic/platform=macOS -archivePath love-macos.xcarchive
    - name: Export Archive
      working-directory: love2d
      run: |
        xcodebuild -exportArchive -archivePath love-macos.xcarchive -exportPath love-macos -exportOptionsPlist platform/xcode/macosx/macos-copy-app.plist
    - name: Zip Archive
      working-directory: love2d
      run: |
        ditto -c -k --sequesterRsrc --keepParent love-macos/love.app love-macos.zip
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: love-macos
        path: love2d/love-macos.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, Linux, Windows, macOS]
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && !cancelled()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release files
      run: |
        # Create release directory
        mkdir -p release-files
        
        # Copy files from each artifact directory, using original artifact names
        for dir in love-linux-*.AppImage love-windows-* love-macos; do
          if [ -d "$dir" ]; then
            echo "Processing directory: $dir"
            find "$dir" -type f \( -name "*.AppImage" -o -name "*.zip" -o -name "*.exe" \) | while read file; do
              # Rename files to include version info
              basename_file=$(basename "$file")
              case "$basename_file" in
                *.AppImage)
                  if [[ "$dir" == *"X64"* ]]; then
                    cp "$file" "release-files/love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-linux-x64.AppImage"
                  elif [[ "$dir" == *"ARM64"* ]]; then
                    cp "$file" "release-files/love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-linux-arm64.AppImage"
                  fi
                  ;;
                love-macos.zip)
                  cp "$file" "release-files/love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-macos.zip"
                  ;;
                *.zip|*.exe)
                  # Windows files - detect architecture and lua engine from directory name
                  if [[ "$dir" == *"x64"* ]]; then
                    arch="x64"
                  elif [[ "$dir" == *"arm64"* ]]; then
                    arch="arm64"  
                  fi
                  
                  lua_suffix=""
                  if [[ "$dir" == *"lua54"* ]]; then
                    lua_suffix="-lua54"
                  fi
                  
                  ext="${basename_file##*.}"
                  cp "$file" "release-files/love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-windows-${arch}${lua_suffix}.${ext}"
                  ;;
              esac
            done
          fi
        done
        
        # List what we have
        echo "Files to be released:"
        ls -la release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        tag_name: v${{ needs.version.outputs.version }}-build-${{ needs.version.outputs.padded_build }}
        name: Love2D ${{ needs.version.outputs.version }} Build ${{ needs.version.outputs.padded_build }}
        body: |
          Automated build of Love2D ${{ needs.version.outputs.version }} for multiple platforms

          Built from upstream Love2D repository
          Build number: ${{ needs.version.outputs.padded_build }}
          Commit: ${{ needs.version.outputs.commit_hash }}
          Repository: ${{ env.LOVE2D_REPO }}
          Branch: ${{ env.LOVE2D_BRANCH }}

          **Downloads:**
          - Linux x86_64: `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-linux-X64.AppImage`
          - Linux ARM64: `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-linux-ARM64.AppImage`
          - Windows x64 (LuaJIT): `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-windows-x64.zip`
          - Windows x64 (Lua 5.4): `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-windows-x64-lua54.zip`
          - Windows ARM64 (LuaJIT): `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-windows-arm64.zip` (if available)
          - Windows ARM64 (Lua 5.4): `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-windows-arm64-lua54.zip` (if available)
          - macOS: `love-${{ needs.version.outputs.version }}-build${{ needs.version.outputs.padded_build }}-macos.zip`

          This build includes:
          - Love2D Game Framework
          - All required runtime libraries
          - Cross-platform compatibility
          - Multiple Lua engine options (LuaJIT and Lua 5.4 for Windows)

          **Note:** 
          - Linux builds are provided as AppImage (make executable and run)
          - Windows builds include both LuaJIT and Lua 5.4 versions
          - Windows builds include both x64 and ARM64 architectures (ARM64 may not always be available)
          - macOS build is a universal app bundle
          - LuaJIT offers better performance with JIT compilation
          - Lua 5.4 provides latest language features and better compatibility
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
